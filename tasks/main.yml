---
- name: Include OS specific variables
  ansible.builtin.include_vars: "{{ ansible_os_family }}{{ ansible_distribution_major_version }}.yml"

- name: Install Dependencies
  ansible.builtin.package:
    name:
      - audispd-plugins
      - curl
      - jq
      - ca-certificates
    state: present

- name: Identify Laurel Latest Version # noqa: command-instead-of-module
  ansible.builtin.shell:
    cmd: |
      set -o pipefail

      curl --silent "https://api.github.com/repos/threathunters-io/laurel/releases/latest" | jq -r '.assets[].browser_download_url' | grep -E "{{ laurel_architecture }}-glibc.tar.gz$" | head -1
  args:
    executable: /bin/bash
  changed_when: false
  register: laurel_latest

- name: Create temporary install directory
  ansible.builtin.file:
    path: /tmp/laurel
    state: directory
    mode: '0755'
    owner: root
    group: root

- name: Create laurel system account
  ansible.builtin.user:
    name: _laurel
    comment: 'Laurel Auditing'
    home: /var/log/laurel
    create_home: yes
    system: yes
    state: present

- name: "Download and unarchive Laurel"
  ansible.builtin.unarchive:
    src: '{{ laurel_latest.stdout }}'
    dest: /tmp/laurel
    remote_src: yes

- name: Copy laurel binary to /usr/local/sbin/
  ansible.builtin.copy:
    src: /tmp/laurel/laurel
    dest: /usr/local/sbin/
    remote_src: yes
    mode: '0755'
    owner: root
    group: root
  register: laurel_installed

- name: Create laurel configuration directory
  ansible.builtin.file:
    path: /etc/laurel
    state: directory
    mode: '0755'
    owner: root
    group: root

- name: Install laurel configuration
  ansible.builtin.copy:
    src: config.toml
    dest: /etc/laurel/
    mode: '0644'
    owner: root
    group: root

- name: Enable laurel via Audispd
  ansible.builtin.copy:
    src: laurel.conf
    dest: "{{ audisp_plugins_dir }}"
    mode: '0640'
    owner: root
    group: root

- name: SELinux Configuration
  block:
  - name: Copy laurel selinux policy
    ansible.builtin.copy:
      src: laurel.pp
      dest: /tmp/
      mode: '0644'
      owner: root
      group: root

  - name: Install laurel selinux policy
    ansible.builtin.command: semodule -i /tmp/laurel.pp
    register: selinux
    failed_when: selinux.rc != 0
    changed_when: no

  - name: Set laurel selinux context
    ansible.builtin.command: restorecon -v -R -F /usr/local/sbin/laurel /etc/laurel /var/log/laurel
    register: restorcon
    failed_when: restorcon.rc != 0
    changed_when: no
  when: selinux_enabled | bool

- name: Restart Auditd service
  ansible.builtin.systemd:
    name: auditd
    state: restarted
  when: ansible_os_family == 'Debian'

- name: Restart Auditd service
  ansible.builtin.service:
    name: auditd
    state: restarted
    use: service
  when: ansible_os_family == 'RedHat'

- name: Ensure Auditd read the applied rules
  ansible.builtin.shell: "auditctl -R /etc/audit/rules.d/audit.rules"
  when: test is not defined

- name: Ensure Auditd load the rules
  ansible.builtin.shell: augenrules --load
  when: test is not defined

- name: Verify if the rules are being properly loaded
  ansible.builtin.shell: auditctl -l
  register: audit_rules
  failed_when: "'No rules' in audit_rules.stdout"
  when: test is not defined

- name: Tell auditd to re-evaluate its configuration
  ansible.builtin.shell: pkill -HUP auditd

- name: Verify Laurel is running
  ansible.builtin.shell: ps aux | grep laurel
  register: laurel_run
  failed_when: "'/usr/local/sbin/laurel' not in laurel_run.stdout"
